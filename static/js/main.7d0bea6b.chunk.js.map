{"version":3,"sources":["components/board-box.jsx","components/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Box","state","arr","Array","fill","toggle","handler","bind","algo","Reset","props","a","this","prev_toggle","setState","rows","flag","i","length","value","j","console","log","className","disabled","onClick","Component","Board","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d0bea6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/box.css';\n//import ReactDOM from \"react-dom\";\n\nclass Box extends Component {\n    constructor(){\n        super();\n        this.state = {\n            arr : Array(9).fill(null),\n            toggle:'o',\n        }\n        this.handler = this.handler.bind(this);\n        this.algo = this.algo.bind(this);\n        this.Reset = this.Reset.bind(this);\n    }\n    handler(props){\n        let a = [...this.state.arr]; \n        let prev_toggle = this.state.toggle;    \n        a[props] = prev_toggle;\n        this.setState((state)=>({arr: [...a],\n                                toggle: (state.toggle === 'o') ? 'x':'o'}));\n    }\n    algo(){\n        \n        const rows = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n        var a = [...this.state.arr];\n        var flag = 0;\n        \n// Get child nodes\n\n        for(let i = 0; i < rows.length; i++ ){\n            let value = a[rows[i][0]];\n            for(let j = 0; j < rows[i].length; j++ ){\n                    var x = rows[i][j];\n                    if(a[x] === value && value !== null)\n                            flag = 1;\n                    else{\n                    flag = 0;\n                    break;\n                    }\n            }\n            if(flag === 1){\n                console.log(\"coming here\"+rows[i])\n                \n                return 1;\n                \n            }\n        }\n        return 0;\n    }\n    Reset(){\n        let a = Array(9).fill(null);\n        this.setState((state)=>({ arr: [...a]  }));\n    }\n\n    render() {\n        var value = false;\n        const dis = function (){\n            this.value = true;\n        }\n        \n        return (\n        <div>\n            <h1 className=\"heading\">Tic~Tac~Toe</h1>\n            <div className=\"grid-container\">\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(0)}>{this.state.arr[0]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(1)}>{this.state.arr[1]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(2)}>{this.state.arr[2]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(3)}>{this.state.arr[3]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(4)}>{this.state.arr[4]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(5)}>{this.state.arr[5]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(6)}>{this.state.arr[6]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(7)}>{this.state.arr[7]}</button>\n            <button disabled={this.value}className=\"grid-item\" onClick = {() => this.handler(8)}>{this.state.arr[8]}</button>\n            </div>\n            <button className=\"reset\" onClick = {() => {this.Reset();this.value=false;}} >Reset</button>\n            \n            {(this.algo())!==1 ? '':<div>{this.value=true}<h1>Winner is {this.state.toggle === 'o' ? 'x':'o'}</h1></div> }\n        </div>\n            \n        )\n    }\n}\nexport default Box;\n","import React, { Component } from 'react'\nimport Box from './board-box'\n class Board extends Component {\n    render() {\n        return (\n            <div>\n                <Box/>\n            </div>\n        )\n    }\n}\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './components/board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <Board />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}